{"version":3,"sources":["CovidData.js","App.js","serviceWorker.js","index.js"],"names":["CovidData","country","cases","todayCases","deaths","todayDeaths","recovered","className","App","useState","setCountry","useEffect","getData","a","fetch","response","json","data","console","log","type","name","id","map","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAceA,G,YAZG,SAAC,GAA2D,IAA1DC,EAAyD,EAAzDA,QAAQC,EAAiD,EAAjDA,MAAMC,EAA2C,EAA3CA,WAAWC,EAAgC,EAAhCA,OAAOC,EAAyB,EAAzBA,YAAYC,EAAa,EAAbA,UAC5D,OACQ,yBAAKC,UAAU,QACX,4BAAKN,GACL,oCAAUC,GACV,0CAAgBC,GAChB,qCAAWC,GACX,2CAAiBC,GACjB,8CAAoBC,MCmCrBE,EA1CL,WAEV,IAFe,EAIeC,mBAAS,IAJxB,mBAIPR,EAJO,KAICS,EAJD,KAKbC,qBAAU,WACRC,MACA,IAIJ,IAAMA,EAAO,uCAAC,8BAAAC,EAAA,sEACaC,MAVf,sDASE,cACJC,EADI,gBAESA,EAASC,OAFlB,OAEJC,EAFI,OAGVP,EAAWO,GACXC,QAAQC,IAAIF,GAJF,2CAAD,qDAOX,OACE,yBAAKV,UAAU,OACd,wBAAIA,UAAU,MAAd,eACA,yBAAKA,UAAU,UAChB,0BAAMA,UAAU,cACZ,2BAAOA,UAAU,YAAYa,KAAK,OAAOC,KAAK,gBAC9C,4BAAQd,UAAU,YAAYa,KAAK,UAAnC,YAGF,yBAAKE,GAAG,aACPrB,EAAQsB,KAAI,SAAAC,GAAC,OACZ,kBAAC,EAAD,CAAWvB,QAASuB,EAAEvB,QACtBC,MAAOsB,EAAEtB,MACTC,WAAYqB,EAAErB,WACdC,OAAUoB,EAAEpB,OACZC,YAAemB,EAAEnB,YACjBC,UAAakB,EAAElB,kBCzBHmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.1f314cc8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CovidData.css';\r\nconst CovidData = ({country,cases,todayCases,deaths,todayDeaths,recovered})=>{\r\n    return (\r\n            <div className=\"card\">\r\n                <h1>{country}</h1>\r\n                <p>Cases:{cases}</p>\r\n                <p>Today Cases:{todayCases}</p>\r\n                <p>Deaths:{deaths}</p>\r\n                <p>Today Deaths:{todayDeaths}</p>\r\n                <p>Today Recovered:{recovered}</p>\r\n            </div>\r\n    );\r\n}\r\nexport default CovidData;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport CovidData from './CovidData';\nconst App=()=> {\n\nconst url = 'https://coronavirus-19-api.herokuapp.com/countries';\n\n const [country,setCountry] = useState([]);\n  useEffect(()=>{//runs whenever our page renders any elements\n    getData();\n  },[]);\n  //empty array to run it only once or,\n  // assign elements in arry\n  //to run it only when that element changes\nconst getData=async ()=>{\n    const response = await fetch(url);\n    const data = await response.json();\n    setCountry(data);\n    console.log(data);\n    \n  }\n  return (\n    <div className=\"App\">\n     <h1 className=\"h1\">Hello World</h1>\n     <div className=\"search\">\n    <form className=\"searchForm\">\n        <input className=\"searchBar\" type=\"text\" name=\"countryName\"/>\n        <button className=\"searchBtn\" type=\"submit\">Search</button>\n      </form>\n      </div>\n      <div id=\"container\">\n      {country.map(e=>(\n        <CovidData country={e.country}\n        cases={e.cases}\n        todayCases={e.todayCases}\n        deaths = {e.deaths}\n        todayDeaths = {e.todayDeaths}\n        recovered = {e.recovered}\n        />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}